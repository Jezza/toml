/* The following code was generated by JFlex 1.7.0 */

package com.github.jezza.lang;

import static com.github.jezza.lang.Tokens.*;

import java.io.StringReader;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>C:/Users/Jezza/Desktop/JavaProjects/toml/src/main/resources/toml.flex</tt>
 */
final class _TomlLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;
  private static final String ZZ_NL = System.getProperty("line.separator");

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int S_BASIC_STRING = 2;
  public static final int S_BASIC_STRING_RECOVERY = 4;
  public static final int S_LITERAL_STRING = 6;
  public static final int S_ML_BASIC_STRING = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\3\1\0\1\40"+
    "\1\4\2\0\1\52\1\41\3\0\1\7\1\42\1\25\1\17\1\0"+
    "\1\10\1\16\6\14\2\5\1\27\2\0\1\43\3\0\4\12\1\20"+
    "\1\12\15\37\1\26\1\51\4\37\1\30\1\44\1\50\1\45\1\0"+
    "\1\6\1\0\1\24\1\15\2\12\1\34\1\23\2\37\1\21\2\37"+
    "\1\35\1\37\1\22\1\13\2\37\1\32\1\36\1\31\1\33\2\37"+
    "\1\11\1\37\1\30\1\46\1\0\1\47\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\2\2\1\3\1\4\1\1\1\3\1\5"+
    "\5\4\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\0\2\17\1\22"+
    "\1\16\1\0\1\21\1\3\1\4\1\0\1\4\2\3"+
    "\2\0\6\4\2\3\1\4\1\0\1\23\1\24\1\25"+
    "\1\26\1\27\1\0\1\30\1\0\1\16\1\0\1\3"+
    "\2\31\1\0\1\4\7\0\1\32\1\33\1\34\1\35"+
    "\1\36\2\4\1\37\2\0\1\16\2\0\1\40\1\3"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\41\2\0"+
    "\1\4\2\0\1\4\1\42\1\0\1\4\1\0\1\4"+
    "\1\0\1\4\1\0\1\43\1\44\1\0\2\4\1\43"+
    "\1\0\2\4\1\0\2\4\4\0\1\43\3\0\1\43"+
    "\1\0\1\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\126\0\327\0\u0102"+
    "\0\u012d\0\u0158\0\u0183\0\u01ae\0\126\0\u01d9\0\u0204\0\u022f"+
    "\0\u025a\0\u0285\0\u02b0\0\126\0\126\0\126\0\126\0\126"+
    "\0\126\0\126\0\u02db\0\126\0\126\0\u0306\0\u0331\0\u035c"+
    "\0\u0331\0\126\0\u0387\0\u03b2\0\u03dd\0\u0408\0\u0433\0\u045e"+
    "\0\u0489\0\u04b4\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6"+
    "\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\126"+
    "\0\126\0\126\0\126\0\126\0\u070e\0\126\0\u0739\0\u0764"+
    "\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc"+
    "\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\u09be\0\u09e9\0\u0a14"+
    "\0\u0158\0\u0158\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16"+
    "\0\u0b41\0\u0b16\0\126\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed\0\u0c18"+
    "\0\126\0\126\0\u0158\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef"+
    "\0\u0d1a\0\126\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c"+
    "\0\u0e47\0\u0e72\0\126\0\u0e9d\0\u0ec8\0\u0ef3\0\u0158\0\u0f1e"+
    "\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076"+
    "\0\u10a1\0\126\0\u10cc\0\u10f7\0\u1122\0\u114d\0\u1178\0\u11a3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\3\7\1\10\1\11\1\12\1\13\1\14\3\12"+
    "\1\11\1\12\1\11\1\15\1\12\1\16\1\17\1\20"+
    "\1\12\1\21\1\12\1\6\1\12\1\22\6\12\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\6"+
    "\1\12\1\6\1\33\2\34\35\33\1\35\7\33\1\36"+
    "\2\33\53\0\1\37\1\40\1\41\36\37\1\42\11\37"+
    "\40\43\1\44\7\43\1\45\2\43\1\0\3\7\47\0"+
    "\1\10\2\0\50\10\5\0\1\46\1\47\1\0\1\46"+
    "\3\12\1\46\1\12\1\46\1\50\1\51\6\12\1\0"+
    "\4\12\1\51\3\12\11\0\1\12\6\0\2\12\1\0"+
    "\7\12\1\0\7\12\1\0\10\12\11\0\1\12\6\0"+
    "\1\52\2\0\1\53\3\0\1\52\1\0\1\52\2\0"+
    "\1\54\1\55\35\0\1\46\1\47\1\0\1\46\1\56"+
    "\1\12\1\57\1\46\1\60\1\46\1\50\1\51\6\12"+
    "\1\0\4\12\1\51\3\12\11\0\1\12\6\0\2\12"+
    "\1\0\7\12\1\0\2\12\1\61\4\12\1\0\10\12"+
    "\11\0\1\12\6\0\2\12\1\0\7\12\1\0\4\12"+
    "\1\62\2\12\1\0\10\12\11\0\1\12\6\0\2\12"+
    "\1\0\7\12\1\0\4\12\1\63\2\12\1\0\10\12"+
    "\11\0\1\12\6\0\1\64\1\12\1\0\1\65\3\12"+
    "\1\64\1\12\1\64\1\0\1\12\1\16\1\17\4\12"+
    "\1\0\10\12\11\0\1\12\6\0\2\12\1\0\7\12"+
    "\1\0\7\12\1\0\2\12\1\66\5\12\11\0\1\12"+
    "\41\0\1\67\12\0\1\33\2\0\35\33\1\0\7\33"+
    "\1\0\2\33\15\0\1\70\4\0\1\71\1\72\5\0"+
    "\1\73\1\74\1\75\4\0\1\76\10\0\1\77\1\0"+
    "\41\37\1\0\10\37\1\100\2\37\1\41\36\37\1\0"+
    "\10\37\1\100\40\43\1\0\7\43\1\0\2\43\40\0"+
    "\1\101\13\0\3\7\11\0\1\70\4\0\1\71\1\72"+
    "\5\0\1\73\1\74\1\75\4\0\1\76\10\0\1\77"+
    "\6\0\1\102\1\47\1\0\1\102\3\12\1\102\1\12"+
    "\1\102\1\50\1\51\6\12\1\0\4\12\1\51\3\12"+
    "\11\0\1\12\6\0\1\64\1\12\1\0\1\64\3\12"+
    "\1\64\1\12\1\64\1\0\7\12\1\0\10\12\11\0"+
    "\1\12\6\0\1\103\2\0\1\103\3\0\1\103\1\0"+
    "\1\103\41\0\1\104\1\12\1\105\1\104\3\12\1\104"+
    "\1\12\1\104\1\0\5\12\1\106\1\12\1\0\10\12"+
    "\11\0\1\12\6\0\1\52\1\107\1\0\1\52\3\0"+
    "\1\52\1\0\1\52\1\50\1\110\13\0\1\110\23\0"+
    "\1\52\1\107\1\0\1\52\1\111\1\0\1\112\1\52"+
    "\1\113\1\52\1\50\1\110\13\0\1\110\40\0\1\114"+
    "\54\0\1\115\33\0\1\116\1\12\1\0\1\116\1\12"+
    "\1\116\1\12\3\116\1\0\1\116\2\12\2\116\2\12"+
    "\1\0\4\12\1\116\3\12\11\0\1\12\6\0\2\12"+
    "\1\0\1\117\3\12\1\117\1\12\1\117\1\0\7\12"+
    "\1\0\10\12\11\0\1\12\6\0\2\12\1\0\1\120"+
    "\5\12\1\120\1\0\7\12\1\0\10\12\11\0\1\12"+
    "\6\0\2\12\1\0\7\12\1\0\3\12\1\121\3\12"+
    "\1\0\10\12\11\0\1\12\6\0\2\12\1\0\7\12"+
    "\1\0\2\12\1\122\4\12\1\0\10\12\11\0\1\12"+
    "\6\0\2\12\1\0\7\12\1\0\7\12\1\0\5\12"+
    "\1\123\2\12\11\0\1\12\6\0\1\64\1\47\1\0"+
    "\1\64\3\12\1\64\1\12\1\64\1\50\1\51\6\12"+
    "\1\0\4\12\1\51\3\12\11\0\1\12\6\0\1\64"+
    "\1\47\1\0\1\64\1\56\1\12\1\57\1\64\1\60"+
    "\1\64\1\50\1\51\6\12\1\0\4\12\1\51\3\12"+
    "\11\0\1\12\6\0\2\12\1\0\7\12\1\0\7\12"+
    "\1\0\3\12\1\124\4\12\11\0\1\12\41\0\1\125"+
    "\17\0\1\126\2\0\1\126\1\0\1\126\1\0\3\126"+
    "\1\0\1\126\2\0\2\126\7\0\1\126\23\0\1\127"+
    "\2\0\1\127\1\0\1\127\1\0\3\127\1\0\1\127"+
    "\2\0\2\127\7\0\1\127\16\0\1\130\1\131\1\132"+
    "\50\130\40\0\1\133\17\0\1\134\1\47\1\0\1\134"+
    "\3\12\1\134\1\12\1\134\1\50\1\51\6\12\1\0"+
    "\4\12\1\51\3\12\11\0\1\12\6\0\1\103\1\50"+
    "\1\0\1\103\3\0\1\103\1\0\1\103\1\0\1\110"+
    "\13\0\1\110\23\0\1\104\1\106\1\0\1\104\3\12"+
    "\1\104\1\12\1\104\1\0\7\12\1\0\10\12\11\0"+
    "\1\12\6\0\1\135\2\0\1\135\3\0\1\135\1\0"+
    "\1\135\41\0\1\104\1\12\1\0\1\104\3\12\1\104"+
    "\1\12\1\104\1\0\7\12\1\0\10\12\11\0\1\12"+
    "\6\0\1\52\2\0\1\52\3\0\1\52\1\0\1\52"+
    "\41\0\1\135\1\0\1\105\1\135\3\0\1\135\1\0"+
    "\1\135\6\0\1\105\32\0\1\136\2\0\1\136\1\0"+
    "\1\136\1\0\3\136\1\0\1\136\2\0\2\136\7\0"+
    "\1\136\26\0\1\137\3\0\1\137\1\0\1\137\44\0"+
    "\1\140\5\0\1\140\57\0\1\141\51\0\1\142\35\0"+
    "\1\116\1\56\1\0\1\116\1\12\1\116\1\12\3\116"+
    "\1\0\1\116\2\12\2\116\2\12\1\0\4\12\1\116"+
    "\3\12\11\0\1\12\6\0\1\12\1\57\1\0\1\117"+
    "\3\12\1\117\1\12\1\117\1\0\7\12\1\0\10\12"+
    "\11\0\1\12\6\0\1\12\1\60\1\0\1\120\5\12"+
    "\1\120\1\0\7\12\1\0\10\12\11\0\1\12\6\0"+
    "\2\12\1\0\7\12\1\0\7\12\1\0\6\12\1\124"+
    "\1\12\11\0\1\12\6\0\2\12\1\0\7\12\1\0"+
    "\7\12\1\0\4\12\1\143\3\12\11\0\1\12\2\0"+
    "\3\125\54\0\1\144\2\0\1\144\1\0\1\144\1\0"+
    "\3\144\1\0\1\144\2\0\2\144\7\0\1\144\23\0"+
    "\1\145\2\0\1\145\1\0\1\145\1\0\3\145\1\0"+
    "\1\145\2\0\2\145\7\0\1\145\16\0\55\130\1\132"+
    "\50\130\5\0\1\64\1\47\1\0\1\64\3\12\1\64"+
    "\1\12\1\64\1\50\1\51\4\12\1\146\1\12\1\0"+
    "\4\12\1\51\3\12\11\0\1\12\6\0\1\135\1\105"+
    "\1\0\1\135\3\0\1\135\1\0\1\135\41\0\1\136"+
    "\1\111\1\0\1\136\1\0\1\136\1\0\3\136\1\0"+
    "\1\136\2\0\2\136\7\0\1\136\24\0\1\112\1\0"+
    "\1\137\3\0\1\137\1\0\1\137\42\0\1\113\1\0"+
    "\1\140\5\0\1\140\41\0\1\147\2\0\1\147\1\0"+
    "\1\147\1\0\3\147\1\0\1\147\2\0\2\147\7\0"+
    "\1\147\23\0\1\150\2\0\1\150\1\0\1\150\1\0"+
    "\3\150\1\0\1\150\2\0\2\150\7\0\1\150\23\0"+
    "\1\151\1\12\1\0\1\151\3\12\1\151\1\12\1\151"+
    "\1\0\7\12\1\0\10\12\11\0\1\12\6\0\1\152"+
    "\2\0\1\152\1\0\1\152\1\0\3\152\1\0\1\152"+
    "\2\0\2\152\7\0\1\152\23\0\1\153\2\0\1\153"+
    "\1\0\1\153\1\0\3\153\1\0\1\153\2\0\2\153"+
    "\7\0\1\153\23\0\1\154\1\12\1\0\1\154\3\12"+
    "\1\154\1\12\1\154\1\0\7\12\1\0\10\12\11\0"+
    "\1\12\6\0\1\155\2\0\1\155\1\0\1\155\1\0"+
    "\3\155\1\0\1\155\2\0\2\155\7\0\1\155\23\0"+
    "\2\12\1\0\7\12\1\0\5\12\1\156\1\12\1\0"+
    "\10\12\11\0\1\12\6\0\1\157\2\0\1\157\1\0"+
    "\1\157\1\0\3\157\1\0\1\157\2\0\2\157\7\0"+
    "\1\157\23\0\1\160\1\12\1\0\1\160\3\12\1\160"+
    "\1\12\1\160\1\0\7\12\1\0\10\12\11\0\1\12"+
    "\6\0\1\161\2\0\1\161\1\0\1\161\1\0\3\161"+
    "\1\0\1\161\2\0\2\161\7\0\1\161\23\0\1\162"+
    "\1\12\1\0\1\162\3\12\1\162\1\12\1\162\1\0"+
    "\7\12\1\0\10\12\11\0\1\12\6\0\1\163\2\0"+
    "\1\163\1\0\1\163\1\0\3\163\1\0\1\163\2\0"+
    "\2\163\7\0\1\163\23\0\2\12\1\164\7\12\1\0"+
    "\5\12\1\165\1\166\1\0\1\167\1\166\6\12\11\0"+
    "\1\12\6\0\1\170\2\0\1\170\3\0\1\170\1\0"+
    "\1\170\41\0\1\171\1\12\1\0\1\171\3\12\1\171"+
    "\1\12\1\171\1\0\7\12\1\0\10\12\11\0\1\12"+
    "\6\0\1\172\1\12\1\0\1\172\3\12\1\172\1\12"+
    "\1\172\1\0\7\12\1\0\10\12\11\0\1\12\6\0"+
    "\1\173\2\0\1\173\3\0\1\173\1\0\1\173\41\0"+
    "\1\174\1\12\1\0\1\174\3\12\1\174\1\12\1\174"+
    "\1\0\7\12\1\0\10\12\11\0\1\12\6\0\1\175"+
    "\1\12\1\0\1\175\3\12\1\175\1\12\1\175\1\0"+
    "\7\12\1\0\10\12\11\0\1\12\30\0\1\176\30\0"+
    "\2\12\1\0\7\12\1\0\7\12\1\176\10\12\11\0"+
    "\1\12\6\0\2\12\1\0\7\12\1\0\7\12\1\177"+
    "\10\12\11\0\1\12\6\0\1\200\2\0\1\200\3\0"+
    "\1\200\1\0\1\200\41\0\1\201\2\0\1\201\3\0"+
    "\1\201\1\0\1\201\41\0\1\202\2\0\1\202\3\0"+
    "\1\202\1\0\1\202\41\0\1\203\2\0\1\203\3\0"+
    "\1\203\1\0\1\203\63\0\1\204\30\0\1\205\2\0"+
    "\1\205\3\0\1\205\1\0\1\205\41\0\1\206\2\0"+
    "\1\206\3\0\1\206\1\0\1\206\43\0\1\164\7\0"+
    "\1\207\5\0\1\164\2\0\1\202\27\0\1\210\2\0"+
    "\1\210\3\0\1\210\1\0\1\210\41\0\1\210\1\0"+
    "\1\164\1\210\3\0\1\210\1\0\1\210\6\0\1\164"+
    "\2\0\1\202\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4558];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\10\2\0\1\11\6\1\1\11\6\1\7\11"+
    "\1\1\2\11\1\1\1\0\2\1\1\11\1\1\1\0"+
    "\3\1\1\0\3\1\2\0\11\1\1\0\5\11\1\0"+
    "\1\11\1\0\1\1\1\0\3\1\1\0\1\1\7\0"+
    "\10\1\2\0\1\1\2\0\1\11\5\1\2\11\1\1"+
    "\2\0\1\1\2\0\1\1\1\11\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11\1\0\3\1"+
    "\1\0\2\1\1\0\2\1\4\0\1\11\3\0\1\1"+
    "\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	private final StringBuilder string = new StringBuilder(32);
	private boolean poisoned = false;

	public _TomlLexer(String in) {
		this(new StringReader(in));
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _TomlLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 166) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  private static String zzToPrintable(String str) {
    StringBuilder builder = new StringBuilder();
    for (int n = 0 ; n < str.length() ; ) {
      int ch = str.codePointAt(n);
      int charCount = Character.charCount(ch);
      n += charCount;
      if (ch > 31 && ch < 127) {
        builder.append((char)ch);
      } else if (charCount == 1) {
        builder.append(String.format("\\u%04X", ch));
      } else {
        builder.append(String.format("\\U%06X", ch));
      }
    }
    return builder.toString();
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token next() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { 	return Token.EOS;
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [95] { return new Token(BAD_CHARACTER, yyline, yycolumn, yytext()); }");
            { return new Token(BAD_CHARACTER, yyline, yycolumn, yytext());
            } 
            // fall through
          case 37: break;
          case 2: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [65] {  }");
            { 
            } 
            // fall through
          case 38: break;
          case 3: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [73] { return new Token(INTEGER_DEC, yyline, yycolumn, yytext()); }");
            { return new Token(INTEGER_DEC, yyline, yycolumn, yytext());
            } 
            // fall through
          case 39: break;
          case 4: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [85] { return new Token(KEY, yyline, yycolumn, yytext()); }");
            { return new Token(KEY, yyline, yycolumn, yytext());
            } 
            // fall through
          case 40: break;
          case 5: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [87] { return new Token(DOT, yyline, yycolumn, \".\"); }");
            { return new Token(DOT, yyline, yycolumn, ".");
            } 
            // fall through
          case 41: break;
          case 6: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [68] { string.setLength(0); poisoned = false; yybegin(S_BASIC_STRING); }");
            { string.setLength(0); poisoned = false; yybegin(S_BASIC_STRING);
            } 
            // fall through
          case 42: break;
          case 7: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [69] { string.setLength(0); poisoned = false; yybegin(S_LITERAL_STRING); }");
            { string.setLength(0); poisoned = false; yybegin(S_LITERAL_STRING);
            } 
            // fall through
          case 43: break;
          case 8: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [88] { return new Token(COMMA, yyline, yycolumn, \",\"); }");
            { return new Token(COMMA, yyline, yycolumn, ",");
            } 
            // fall through
          case 44: break;
          case 9: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [89] { return new Token(EQ, yyline, yycolumn, \"=\"); }");
            { return new Token(EQ, yyline, yycolumn, "=");
            } 
            // fall through
          case 45: break;
          case 10: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [90] { return new Token(LBRACKET, yyline, yycolumn, \"[\"); }");
            { return new Token(LBRACKET, yyline, yycolumn, "[");
            } 
            // fall through
          case 46: break;
          case 11: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [91] { return new Token(RBRACKET, yyline, yycolumn, \"]\"); }");
            { return new Token(RBRACKET, yyline, yycolumn, "]");
            } 
            // fall through
          case 47: break;
          case 12: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [92] { return new Token(LBRACE, yyline, yycolumn, \"{\"); }");
            { return new Token(LBRACE, yyline, yycolumn, "{");
            } 
            // fall through
          case 48: break;
          case 13: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [93] { return new Token(RBRACE, yyline, yycolumn, \"}\"); }");
            { return new Token(RBRACE, yyline, yycolumn, "}");
            } 
            // fall through
          case 49: break;
          case 14: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [102] { string.append(yytext()); }");
            { string.append(yytext());
            } 
            // fall through
          case 50: break;
          case 15: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [114] { poisoned = true; }");
            { poisoned = true;
            } 
            // fall through
          case 51: break;
          case 16: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [99] { yybegin(YYINITIAL);"+ZZ_NL+"                        return new Token(poisoned ? STRING_POISON : STRING, yyline, yycolumn, string.toString()); }");
            { yybegin(YYINITIAL);
                        return new Token(poisoned ? STRING_POISON : STRING, yyline, yycolumn, string.toString());
            } 
            // fall through
          case 52: break;
          case 17: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [110] { string.append(\'\\\\\'); }");
            { string.append('\\');
            } 
            // fall through
          case 53: break;
          case 18: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [118] { yybegin(YYINITIAL);"+ZZ_NL+"                      return new Token(poisoned ? STRING_POISON : STRING, yyline, yycolumn, string.toString()); }");
            { yybegin(YYINITIAL);
                      return new Token(poisoned ? STRING_POISON : STRING, yyline, yycolumn, string.toString());
            } 
            // fall through
          case 54: break;
          case 19: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [104] { string.append(\'\\b\'); }");
            { string.append('\b');
            } 
            // fall through
          case 55: break;
          case 20: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [106] { string.append(\'\\n\'); }");
            { string.append('\n');
            } 
            // fall through
          case 56: break;
          case 21: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [107] { string.append(\'\\f\'); }");
            { string.append('\f');
            } 
            // fall through
          case 57: break;
          case 22: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [105] { string.append(\'\\t\'); }");
            { string.append('\t');
            } 
            // fall through
          case 58: break;
          case 23: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [108] { string.append(\'\\r\'); }");
            { string.append('\r');
            } 
            // fall through
          case 59: break;
          case 24: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [109] { string.append(\'\\\"\'); }");
            { string.append('\"');
            } 
            // fall through
          case 60: break;
          case 25: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [78] { return new Token(FLOAT, yyline, yycolumn, yytext()); }");
            { return new Token(FLOAT, yyline, yycolumn, yytext());
            } 
            // fall through
          case 61: break;
          case 26: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [74] { return new Token(INTEGER_HEX, yyline, yycolumn, yytext()); }");
            { return new Token(INTEGER_HEX, yyline, yycolumn, yytext());
            } 
            // fall through
          case 62: break;
          case 27: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [75] { return new Token(INTEGER_OCT, yyline, yycolumn, yytext()); }");
            { return new Token(INTEGER_OCT, yyline, yycolumn, yytext());
            } 
            // fall through
          case 63: break;
          case 28: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [76] { return new Token(INTEGER_BIN, yyline, yycolumn, yytext()); }");
            { return new Token(INTEGER_BIN, yyline, yycolumn, yytext());
            } 
            // fall through
          case 64: break;
          case 29: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [79] { return new Token(INF, yyline, yycolumn, yytext()); }");
            { return new Token(INF, yyline, yycolumn, yytext());
            } 
            // fall through
          case 65: break;
          case 30: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [80] { return new Token(NAN, yyline, yycolumn, yytext()); }");
            { return new Token(NAN, yyline, yycolumn, yytext());
            } 
            // fall through
          case 66: break;
          case 31: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [71] { string.setLength(0); yybegin(S_ML_BASIC_STRING); }");
            { string.setLength(0); yybegin(S_ML_BASIC_STRING);
            } 
            // fall through
          case 67: break;
          case 32: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [127] { yybegin(YYINITIAL);"+ZZ_NL+"                   return new Token(STRING, yyline, yycolumn, string.toString()); }");
            { yybegin(YYINITIAL);
                   return new Token(STRING, yyline, yycolumn, string.toString());
            } 
            // fall through
          case 68: break;
          case 33: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [84] { return new Token(BOOLEAN, yyline, yycolumn, yytext()); }");
            { return new Token(BOOLEAN, yyline, yycolumn, yytext());
            } 
            // fall through
          case 69: break;
          case 34: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [111] { string.append((char) Integer.parseInt(yytext().substring(2), 16)); }");
            { string.append((char) Integer.parseInt(yytext().substring(2), 16));
            } 
            // fall through
          case 70: break;
          case 35: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [82] { return new Token(DATE, yyline, yycolumn, yytext()); }");
            { return new Token(DATE, yyline, yycolumn, yytext());
            } 
            // fall through
          case 71: break;
          case 36: 
            System.out.println("line: "+(yyline+1)+" "+"col: "+(yycolumn+1)+" "+"match: --"+zzToPrintable(yytext())+"--");
            System.out.println("action [112] { string.append(Character.toChars(Integer.parseInt(yytext().substring(2), 16))); }");
            { string.append(Character.toChars(Integer.parseInt(yytext().substring(2), 16)));
            } 
            // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java _TomlLexer [ --encoding <name> ] <inputfile(s)>");
    }
    else {
      int firstFilePos = 0;
      String encodingName = "UTF-8";
      if (argv[0].equals("--encoding")) {
        firstFilePos = 2;
        encodingName = argv[1];
        try {
          java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid? 
        } catch (Exception e) {
          System.out.println("Invalid encoding '" + encodingName + "'");
          return;
        }
      }
      for (int i = firstFilePos; i < argv.length; i++) {
        _TomlLexer scanner = null;
        try {
          java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
          java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
          scanner = new _TomlLexer(reader);
          do {
            System.out.println(scanner.next());
          } while (!scanner.zzAtEOF);

        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
